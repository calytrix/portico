<?xml version="1.0"?>
<!--
                  Welcome to the Portico Build System

       The Portico build system is an artefact-driven, modular, Ant
       based system. The base framework is split up over a number of
       different build files (base structure, macros, etc...) and is
       designed to be extended rather than modified. The full system
       is introduced and described in the online documentation:
       
       http://porticoproject.org/index.php?title=Building_Portico
-->
<project name="hla13">

	<!-- ================================================================================= -->
	<!--                                 General Settings                                  -->
	<!-- ================================================================================= -->
	<description>
		Windows 32-bit C++ build profile for HLA v1.3 Interface
	</description>

	<!-- ==== Basic Properties ==== -->
	<!-- Get a reference to the JDK we want to use, falling back on the given default -->
	<getJdk property="jdk.home.win32" arch="x86" fallback="${jdk.default.win32}"/>
	<getJdk property="jdk.home.win64" arch="amd64" fallback="${jdk.default.win64}"/>

	<!-- ==================================== -->
	<!-- ==== HLA13 Interface Properties ==== -->
	<!-- ==================================== -->
	<!-- source -->
	<property name="hla13.src.dir"             location="${cpp.src.dir}/hla13/src"/>
	<property name="hla13.include.dir"         location="${cpp.src.dir}/hla13/include/hla13"/>
	<property name="hla13.test.src.dir"        location="${cpp.src.dir}/hla13/test"/>
	<property name="hla13.example.dir"         location="${cpp.src.dir}/hla13/example"/>

	<!-- build -->
	<property name="hla13.build.dir"           location="${build.dir}/cpp/win32/hla13"/>
	<property name="hla13.complete.dir"        location="${hla13.build.dir}/complete"/>

	<!-- test build -->
	<property name="test13.build.dir"          location="${build.dir}/cpp/win32/test13"/>
	<property name="test13.complete.dir"       location="${test13.build.dir}/complete"/>

	<!-- file sets -->
	<!-- files to include in libFedTime -->
	<fileset dir="${hla13.src.dir}" id="fileset.libFedTime">
		<include name="time/RTIfedTime.cpp"/>
		<include name="time/FedTime.cpp"/>
		<include name="time/FedTimeFactory.cpp"/>
		<include name="types/Exception.cpp"/>
	</fileset>

	<!-- files to include in libRTI-NG -->
	<fileset dir="${hla13.src.dir}" id="fileset.libRTI-NG">
		<include name="**/*.cpp"/>
		<exclude name="time/RTIfedTime.cpp"/>
		<exclude name="time/FedTime.cpp"/>
		<exclude name="time/FedTimeFactory.cpp"/>
	</fileset>

	<!-- =========================================================== -->
	<!--                     Project Libraries                       -->
	<!-- =========================================================== -->
	<!-- ==== Library Path Definitions ==== -->
	<!-- See profiles/project.libraries.xml -->
	<!-- <property name="cppunit.dir"     location="..."/> -->
	<!-- <property name="cppunit.include" location="..."/> -->
	<!-- <property name="cppunit.lib"     location="..."/> -->

	<!-- ================================================================================= -->
	<!--                               Macro: msvc-hla13                                   -->
	<!-- ================================================================================= -->
	<!-- This macro, ugly as it is, defines the core compiling task. Depending on the values
	     provided to it, it defines the library name, including 64-bit and debug suffixes
		 appropriately, the various symbols required during compilation, the target architectures
		 and their include files and references to the appropriate libraries to link to.
	-->	 
	<macrodef name="msvc-hla13" description="(HLA 1.3) Compile the libFedTime library">
		<!-- Attributes -->
		<attribute name="library"  description="libRTI-NG or libFedTime"/>
		<attribute name="build"    description="release or debug"/>
		<attribute name="arch"     description="x86 or amd64"/>
		<attribute name="compiler" description="vc10, vc9, vc8"/>

		<sequential>
			<!-- local properties used in the compile and calculated below -->
			<local name="_fileset"/>     <!-- the fileset ref pointing to the source to compile -->
			<local name="_bitness"/>     <!-- appends "64" or "" to end of library name -->
			<local name="_d"/>           <!-- appends "d" or "" to end of library name -->
			<local name="_cargs"/>       <!-- compiler arguments -->
			<local name="_largs"/>       <!-- linker arguments -->
			<local name="_buildsymbol"/> <!-- adds "DEBUG" or "RELEASE" symbol definition -->
			<local name="_libsymbols"/>  <!-- adds BUILDING_RTI and/or BUILDING_FEDTIME -->
			<local name="_libfedtime"/>  <!-- if building RTI-NG, ensures libFedTime is linked -->
			<local name="_jdkhome"/>     <!-- path to either 32 or 64-bit JDK -->

			<!-- Are we building for 32-bit or 64-bit? -->
			<if><equals arg1="@{arch}" arg2="amd64"/>
				<then>
					<property name="_bitness" value="64"/>
					<property name="_jdkhome" value="${jdk.home.win64}"/>
				</then>
				<else>
					<property name="_bitness" value=""/>
					<property name="_jdkhome" value="${jdk.home.win32}"/>
				</else>
			</if>

			<!-- Is this a Debug or Release build? -->
			<if><equals arg1="@{build}" arg2="debug"/>
				<then>
				      <!-- Debug Build -->
				      <property name="_d"           value="d"/>
				      <property name="_cargs"       value="${msvc.debug.defaults}"/>
				      <property name="_largs"       value="/DEBUG"/>
					  <property name="_buildsymbol" value="DEBUG"/>
				</then>
				<else>
				      <!-- Release Build -->
				      <property name="_d"           value=""/>
				      <property name="_cargs"       value="${msvc.release.defaults}"/>
				      <property name="_largs"       value=""/>
					  <property name="_buildsymbol" value="RELEASE"/>
				</else>
			</if>

			<!-- Are we building libRTI-NG or libFedTime? -->
			<if><equals arg1="@{library}" arg2="libRTI-NG"/>
			    <then>
					<!-- Building libRTI-NG -->
					<property name="_fileset"    value="fileset.libRTI-NG"/>
					<property name="_libsymbols" value="BUILDING_RTI"/>
					<property name="_libfedtime" value="libFedTime${_bitness}${_d}"/>
				</then>
				<else>
					<!-- Building libFedTime -->
					<property name="_fileset"    value="fileset.libFedTime"/>
					<property name="_libsymbols" value="BUILDING_RTI,BUILDING_FEDTIME"/>
					<property name="_libfedtime" value=""/> <!-- nothing, we're building it! -->
				</else>
			</if>

			<!-- ========================== -->
			<!-- Do the library compilation -->
			<!-- ========================== -->
			<echo message="(HLA v1.3) Building @{library}${_bitness}${_d} (@{compiler})"/>
			<cpptask outfile="@{library}${_bitness}${_d}"
			         workdir="${hla13.build.dir}/@{arch}/@{compiler}/@{build}"
					 outdir="${hla13.complete.dir}"
			         type="shared"
			         arch="@{arch}"
			         compiler="@{compiler}"
			         compilerArgs="${_cargs}"
			         linkerArgs="${_largs}">
				<fileset refid="${_fileset}"/>
				<includepath path="${hla13.include.dir}"/>
				<includepath path="${hla13.src.dir}"/>
				<includepath path="${jdk.home.win32}/include;${jdk.home.win32}/include/win32"/>
				<define name="RTI_USES_STD_FSTREAM"/>
				<define name="${_libsymbols}"/>
				<define name="${_buildsymbol}"/>
				<library path="${_jdkhome}/lib" libs="jvm"/>
				<library path="${hla13.build.dir}/complete" libs="${_libfedtime}"/>
			</cpptask>
		</sequential>
	</macrodef>

	<!-- ================================================================================= -->
	<!--                                   Clean Targets                                   -->
	<!-- ================================================================================= -->
	<target name="clean" extensionOf="cpp.clean">
		<delete dir="${hla13.build.dir}"/>
		<delete dir="${test13.build.dir}"/>
	</target>

	<!-- ================================================================================= -->
	<!--                                  Compile Targets                                  -->
	<!-- ================================================================================= -->
	<!-- 
	     The parent compilation target. This will compile all the core Portico C++
	     interface and the associated unit test suite code.
	-->
	<target name="compile"
	        extensionOf="cpp.compile"
	        description="Compile all versions of the C++ HLA v1.3 Interface"
	        depends="compile.x86,compile.amd64"/>

	<target name="compile.x86"
	        extensionOf="cpp.compile"
	        description="Compile 32-bit C++ HLA v1.3 Interface"
	        depends="compile.x86.debug,
	                 compile.x86.release"/>

	<target name="compile.amd64"
	        extensionOf="cpp.compile"
	        description="Compile the 64-bit C++ HLA v1.3 Interface"
	        depends="compile.amd64.debug,
	                 compile.amd64.release"/>

	<!-- ======================================= -->
	<!--            HLA 1.3 Interface            -->
	<!-- ======================================= -->
	<!--                                 -->
	<!-- === Visual Studio 10 Builds === -->
	<!--                                 -->
	<target name="compile.x86.debug">
		<msvc-hla13 library="libFedTime" build="debug" arch="x86" compiler="vc10"/>
		<msvc-hla13 library="libRTI-NG"  build="debug" arch="x86" compiler="vc10"/>
	</target>
	
	<target name="compile.x86.release">
		<msvc-hla13 library="libFedTime" build="release" arch="x86" compiler="vc10"/>
		<msvc-hla13 library="libRTI-NG"  build="release" arch="x86" compiler="vc10"/>
	</target>

	<target name="compile.amd64.debug" if="platform.win64">
		<msvc-hla13 library="libFedTime" build="debug" arch="amd64" compiler="vc10"/>
		<msvc-hla13 library="libRTI-NG"  build="debug" arch="amd64" compiler="vc10"/>
	</target>
	
	<target name="compile.amd64.release" if="platform.win64">
		<msvc-hla13 library="libFedTime" build="release" arch="amd64" compiler="vc10"/>
		<msvc-hla13 library="libRTI-NG"  build="release" arch="amd64" compiler="vc10"/>
	</target>
	
	<!-- ==================================== -->
	<!--          HLA 1.3 Test Suite          -->
	<!-- ==================================== -->
	<target name="test.compile.x86" depends="compile.x86.debug">
		<msvc outfile="test13"
		      workdir="${test13.build.dir}"
		      outdir="${test13.complete.dir}"
		      type="executable"
			  arch="x86"
		      compilerArgs="${msvc.release.defaults}"
		      linkerArgs="">
			<fileset dir="${hla13.test.src.dir}" includes="**/*.cpp"/>
			<includepath path="${hla13.include.dir}"/>
			<includepath path="${hla13.src.dir}/hla/time"/>
			<includepath path="${cppunit.include}"/>
			<define name="RTI_USES_STD_FSTREAM"/>
			<define name="DEBUG"/>
			<library path="${hla13.complete.dir}" libs="RTI-NGd,FedTimed"/>
			<library path="${cppunit.dir}/win32/vc10" libs="cppunit"/>
		</msvc>
	</target>

	<!-- ================================================================================= -->
	<!--                                  Testing Targets                                  -->
	<!-- ================================================================================= -->

	<!-- ==================================== -->
	<!--          HLA 1.3 Test Suite          -->
	<!-- ==================================== -->
	<target name="test" extensionOf="cpp.test" depends="java.sandbox,test.compile.x86">
		<!-- 1. copy the testing resources into test dir (RID file etc...) -->
		<copy todir="${test13.complete.dir}">
			<fileset dir="${resources.testdata.dir}/cpptest/hla13" includes="**/*"/>
			<filterset begintoken="[" endtoken="]">
				<filter token="jarfile" value="${dist.lib.dir}/portico.jar"/>
			</filterset>
		</copy>
		<echo>Copied testing resources to ${test13.complete.dir}</echo>

		<!-- 2. run the actual test application -->
		<exec dir="${test13.complete.dir}"
		      executable="${test13.complete.dir}\test13.exe"
		      failonerror="false"
		      failifexecutionfails="false"
		      resultproperty="test13.result">
			<arg value="${test13.complete.dir}\test-results.xml"/>
			<env key="RTI_HOME" path="."/><!-- required, but we set the env up properly anyway -->
			<env key="PATH" path="${hla13.complete.dir};${jdk.home.win32}\jre\bin\client"/>
			<env key="PORTICO_DEBUG" value="OFF"/>
			<env key="CLASSPATH" path="${dist.lib.dir}\portico.jar"/>
			<env key="PORTICO_JNICHECK" value="true"/>
			<env key="TEST.GROUP" value="${test.group}"/>
		</exec>

		<!-- 3. Generate the report. This will fail the build if any of the tests failed -->
		<echo>Generating the Unit Test Report</echo>
		<cppunit-report result="${test13.result}"
		                xmlfile="${test13.complete.dir}/test-results.xml"
		                xslfile="${test13.complete.dir}/xsl/results.xsl"
		                outfile="${test13.complete.dir}/test-results.html"/>
	</target>

	<!-- ================================================================================= -->
	<!--                                  Sandbox Targets                                  -->
	<!-- ================================================================================= -->
	<!-- 
	     The main sandbox preparation target. This will aggregate together all the various
	     required artefacts scattered around the build environment into the structure that
	     should be present when installed on a users system (relative to the sandbox dir).
	-->
	<target name="sandbox" extensionOf="cpp.sandbox" depends="java.sandbox,compile">
		<!-- ======================= -->
		<!-- Copy across the Headers -->
		<!-- ======================= -->
		<mkdir dir="${dist.sandbox.dir}/include/hla13"/>
		<copy todir="${dist.sandbox.dir}/include/hla13">
			<fileset dir="${hla13.include.dir}" includes="**/*"/>
		</copy>

		<!-- ========================= -->
		<!-- Copy across the libraries -->
		<!-- ========================= -->
		<!-- Copy across the C++ libraries -->
		<mkdir dir="${dist.lib.dir}/vc10"/>
		<copy todir="${dist.lib.dir}/vc10">
			<fileset dir="${hla13.complete.dir}" includes="**/*.lib,**/*.exp,**/*.pdb"/>
		</copy>
		<!-- Copy across the C++ dlls -->
		<mkdir dir="${dist.bin.dir}/vc10"/>
		<copy todir="${dist.bin.dir}/vc10">
			<fileset dir="${hla13.complete.dir}" includes="**/*.dll"/>
		</copy>

		<!-- ================================= -->
		<!-- Copy across the example federates -->
		<!-- ================================= -->
		<mkdir dir="${dist.examples.dir}/cpp/hla13"/>
		<copy todir="${dist.examples.dir}/cpp/hla13">
			<fileset dir="${hla13.example.dir}" includes="**/*"/>
		</copy>
	</target>

	<!-- ================================================================================= -->
	<!--                                 Installer Targets                                 -->
	<!-- ================================================================================= -->
	<!-- Not required for an interface build -->

	<!-- ================================================================================= -->
	<!--                             Release Generation Targets                            -->
	<!-- ================================================================================= -->
	<!-- Not required for an interface build -->

</project>
