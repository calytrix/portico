<?xml version="1.0"?>
<!--
                  Welcome to the Portico Build System

       The Portico build system is an artefact-driven, modular, Ant
       based system. The base framework is split up over a number of
       different build files (base structure, macros, etc...) and is
       designed to be extended rather than modified. The full system
       is introduced and described in the online documentation.

          File: profiles/macosx/hla13.xml
       Purpose: Build and package HLA v1.3 interface for Mac OS X
-->
<project name="hla13">

	<!-- ================================================================================= -->
	<!--                                 General Settings                                  -->
	<!-- ================================================================================= -->
	<description>
		Mac OS X C++ build profile for HLA v1.3 Interface.
	</description>

	<!-- ==================================== -->
	<!-- ==== HLA13 Interface Properties ==== -->
	<!-- ==================================== -->
	<!-- source -->
	<property name="hla13.src.dir"             location="${cpp.src.dir}/hla13/src"/>
	<property name="hla13.include.dir"         location="${cpp.src.dir}/hla13/include/hla13"/>
	<property name="hla13.test.src.dir"        location="${cpp.src.dir}/hla13/test"/>
	<property name="hla13.example.dir"         location="${cpp.src.dir}/hla13/example"/>
	
	<!-- build -->
	<property name="hla13.build.dir"           location="${build.dir}/cpp/macosx/hla13"/>
	<property name="hla13.complete.dir"        location="${hla13.build.dir}/complete"/>

	<!-- ================================================================================= -->
	<!--                                   Clean Targets                                   -->
	<!-- ================================================================================= -->
	<target name="clean" extensionOf="cpp.clean">
		<delete dir="${hla13.build.dir}"/>
	</target>

	<!-- ================================================================================= -->
	<!--                                  Compile Targets                                  -->
	<!-- ================================================================================= -->
	<target name="compile" extensionOf="cpp.compile">
		<gcc-hla13 compiler="gcc4" arch="amd64" build="debug"/>
		<gcc-hla13 compiler="gcc4" arch="amd64" build="release"/>
	</target>

	<!-- ================================================ -->
	<!--                Macro: gcc-hla13                  -->
	<!-- ================================================ -->
	<macrodef name="gcc-hla13" description="(HLA 1.3) Compile the RTI libraries">
		<attribute name="compiler" description="gcc4" default="gcc4"/>
		<attribute name="arch"     description="x86 or amd64"/>
		<attribute name="build"    description="release or debug"/>

		<sequential>
			<!--                                                      -->
			<!-- 1. Figure out if we should build this profile at all -->
			<!--                                                      -->
			<if><not><isset property="@{compiler}.@{arch}.@{build}"/></not>
			<then>
				<echo message="[Skip] (HLA v1.3) @{compiler}.@{arch}.@{build} -- not requested"/>
			</then>
			<else>
				<echo message="[Compile] (HLA v1.3) @{compiler}.@{arch}.@{build}"/>

				<!--                                                   -->
				<!-- 2. Make sure we have a valid JDK to build against -->
				<!--                                                   -->
				<verifyJdk location="${jdk.home.macosx}" arch="amd64"/>

				<!--                                                     -->
				<!-- 3. Generate the build-specific local ant properties -->
				<!--                                                     -->
				<cpplocals compiler="@{compiler}" arch="@{arch}" build="@{build}">
					<debug cargs="-g -O0 -fPIC -Wall"/>
					<release cargs="-O0 -fPIC -Wall"/>
				</cpplocals>

				<!-- Are we building for 32-bit or 64-bit? -->
				<if><equals arg1="@{arch}" arg2="amd64"/><then>
					<property name="_jdklib" value="${jdk.home.macosx}/jre/lib/server"/>
				</then><else>
					<property name="_jdklib" value="${jdk.home.macosx}/jre/lib/client"/>
				</else></if>

				<!--                              -->
				<!-- 4. Build the FedTime Library -->
				<!--                              -->
				<echo>Building libFedTime${_bitness}${_d} (@{compiler}-@{build} @{arch})</echo>
				<cpptask outfile="libFedTime${_bitness}${_d}"
						 workdir="${hla13.build.dir}/@{compiler}/@{arch}/@{build}"
						 outdir="${hla13.complete.dir}/@{compiler}"
						 type="shared"
						 arch="@{arch}"
						 compiler="g++"
						 compilerArgs="${_cargs}"
						 linkerArgs="${_largs}">
					<fileset dir="${hla13.src.dir}">
						<include name="time/RTIfedTime.cpp"/>
						<include name="time/FedTime.cpp"/>
						<include name="time/FedTimeFactory.cpp"/>
						<include name="types/Exception.cpp"/>
					</fileset>
					<includepath path="${hla13.include.dir}"/>
					<includepath path="${hla13.src.dir}"/>
					<includepath path="${jdk.home.macosx}/include;${jdk.home.macosx}/include/darwin"/>
					<define name="RTI_USES_STD_FSTREAM"/>
					<define name="BUILDING_RTI"/>
					<define name="BUILDING_FEDTIME"/>
					<define name="${_buildsymbol}"/> <!-- DEBUG or RELEASE -->
					<define name="PORTICO_VERSION=${build.version}"/>
					<define name="PORTICO_BUILD_NUMBER=${build.number}"/>
					<library path="${_jdklib}" libs="jvm,jsig"/>
				</cpptask>

				<!--                               -->
				<!-- 5. Build the main RTI library -->
				<!--                               -->
				<echo>Building libRTI-NG${_bitness}${_d} (@{compiler}-@{build} @{arch})</echo>
				<cpptask outfile="libRTI-NG${_bitness}${_d}"
						 workdir="${hla13.build.dir}/@{compiler}/@{arch}/@{build}"
						 outdir="${hla13.complete.dir}/@{compiler}"
						 type="shared"
						 arch="@{arch}"
						 compiler="g++"
						 compilerArgs="${_cargs}"
						 linkerArgs="${_largs}">
					<fileset dir="${hla13.src.dir}">
						<include name="**/*.cpp"/>
						<exclude name="time/RTIfedTime.cpp"/>
						<exclude name="time/FedTime.cpp"/>
						<exclude name="time/FedTimeFactory.cpp"/>
					</fileset>
					<includepath path="${hla13.include.dir}"/>
					<includepath path="${hla13.src.dir}"/>
					<includepath path="${jdk.home.macosx}/include;${jdk.home.macosx}/include/darwin"/>
					<define name="RTI_USES_STD_FSTREAM"/>
					<define name="BUILDING_RTI"/>
					<define name="${_buildsymbol}"/> <!-- DEBUG or RELEASE -->
					<define name="PORTICO_VERSION=${build.version}"/>
					<define name="PORTICO_BUILD_NUMBER=${build.number}"/>
					<library path="${_jdklib}" libs="jvm,jsig"/>
					<library path="${hla13.complete.dir}/@{compiler}" libs="FedTime${_bitness}${_d}"/>
				</cpptask>

				<!--                                                              -->
				<!-- 6. Create .dylib/.jnilib symlinks needed to support loadback -->
				<!--                                                              -->
				<!-- we can't use the symlink task because it will create links based
				     on the full path name (whereas we want relative links) -->
				<echo>creating symlinks...</echo>
				<symlink-dylib directory="${hla13.complete.dir}/@{compiler}" name="libFedTime${_bitness}${_d}"/>
				<symlink-dylib directory="${hla13.complete.dir}/@{compiler}" name="libRTI-NG${_bitness}${_d}"/>
				<echo message=""/> <!-- new line -->
			</else>
			</if>
		</sequential>
	</macrodef>

	<!-- ================================================================================= -->
	<!--                                  Sandbox Targets                                  -->
	<!-- ================================================================================= -->
	<!-- 
	     The main sandbox preparation target. This will aggregate together all the various
	     required artefacts scattered around the build environment into the structure that
	     should be present when installed on a users system (relative to the sandbox dir).
	-->
	<target name="sandbox" extensionOf="cpp.sandbox" depends="java.sandbox,compile">
		<!-- ======================= -->
		<!-- Copy across the Headers -->
		<!-- ======================= -->
		<mkdir dir="${sandbox.dir}/include/hla13"/>
		<copy todir="${sandbox.dir}/include/hla13">
			<fileset dir="${hla13.include.dir}" includes="**/*"/>
		</copy>

		<!-- ========================= -->
		<!-- Copy across the libraries -->
		<!-- ========================= -->
		<!-- Copy across the C++ libraries -->
		<mkdir dir="${sandbox.lib.dir}"/>
		<copy todir="${sandbox.lib.dir}">
			<fileset dir="${hla13.complete.dir}" includes="**/*.dylib"/>
		</copy>

		<!-- Reconstruct the symlinks: Ant won't copy these properly, so we have to
		     not copy them and recreate them in place. Booooooo. -->
		<symlink-dylib directory="${sandbox.lib.dir}/gcc4" name="libRTI-NG64"/>     <!-- hla13 -->
		<symlink-dylib directory="${sandbox.lib.dir}/gcc4" name="libRTI-NG64d"/>    <!-- hla13 -->
		<symlink-dylib directory="${sandbox.lib.dir}/gcc4" name="libFedTime64"/>    <!-- hla13 -->
		<symlink-dylib directory="${sandbox.lib.dir}/gcc4" name="libFedTime64d"/>   <!-- hla13 -->
		<chmod dir="${sandbox.lib.dir}/gcc4" perm="755" includes="**/*.dylib,**/*.jnilib,**/*.so"/>

		<!-- ================================= -->
		<!-- Copy across the example federates -->
		<!-- ================================= -->
		<mkdir dir="${sandbox.examples.dir}/cpp/hla13"/>
		<copy todir="${sandbox.examples.dir}/cpp/hla13">
			<fileset dir="${hla13.example.dir}" includes="**/*"/>
		</copy>
		<chmod dir="${sandbox.examples.dir}/cpp/hla13" perm="777" includes="**/*.sh"/>
	</target>

</project>
